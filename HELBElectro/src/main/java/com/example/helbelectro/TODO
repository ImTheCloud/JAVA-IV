
General :
-DESIGN PATTERN

Grid:
-Modifier les numeros en lettres

Emplacement :
-Nombre total de produit stocker pour chaque type de produits (stat)
-Nombre total de vente pour chaque enplacement (stat)

Produit :
-Les produit doivent posseder les attribut des composants dont il sont crée
-Quand un produit se fabrique, il doit s'ajouter en continue dans le reste de la grid
-Attente du temps de fabrication pour fabriquer un produit
-Lorsque la grid est pleine, elle doit se vider (manuellement) (bouton, deplacer produit grand entrepot)
-Arreter la production de produit quand c'est plein, et redemarer manuelelement la production
-Lorsque je vend un produit il doit prendre les attribut du composant
-Lorsque je vend un produit ca doit donner l'emplacement au prochain produit en vidant la place

Opti:
-Liste selon le produit le moin présent dans la zone des produits

Ticket :
-Ajouter les attribut des composant dans le ticket



je voudrais que ma methode




  @Override
    public void start(Stage stage) {
        stage.setTitle("HELBElectro");

        bt_changeltNb =bt_changeltNb();
        HBox screen = createScreen();
        VBox root = new VBox(bt_changeltNb, screen);

        root.setAlignment(Pos.TOP_LEFT);
        stage.setScene(new Scene(root, widthScene, heightScene));
        stage.show();
    }

    public static void main(String[] args) {
        launch();
    }
    private Button bt_changeltNb() {
        bt_changeltNb = new Button("Letter");
        return bt_changeltNb;
    }


    private HBox createScreen() {
        HBox screen = new HBox();
        screen.setAlignment(Pos.CENTER);
        screen.setPrefSize(widthScene, heightScene);
        screen.setSpacing(10.0);
        screen.setStyle(String.format("-fx-background-color: %s; -fx-border-color: %s; -fx-border-width: %dpx;", "#282F76", "white", 4));
        screen.setPadding(new Insets(20, 20, 20, 20));
        GridPane grid = gd_araProduct();
        VBox vbox = vb_areaComponent();
        screen.getChildren().addAll(grid, vbox);
        return screen;
    }


    private GridPane gd_araProduct() {
        areaProduct.setHgap(10);
        areaProduct.setVgap(10);
        areaProduct.setStyle(String.format("-fx-border-color: %s; -fx-border-width: 2px; -fx-background-color: %s;", "white", "#626786"));
        areaProduct.setPadding(new Insets(20, 20, 20, 20));
        initializeProductArea();
        return areaProduct;
    }

    public void initializeProductArea() {
        int size_colGrid = 3;
        for (int i = 0; i < size_colGrid; i++) {
            ColumnConstraints column = new ColumnConstraints();
            column.setHgrow(Priority.ALWAYS); // agrandir
            areaProduct.getColumnConstraints().add(column);
        }

        int size_rowGrid = 4;
        for (int i = 0; i < size_rowGrid; i++) {
            RowConstraints row = new RowConstraints();
            row.setVgrow(Priority.ALWAYS);
            areaProduct.getRowConstraints().add(row);
        }

        // Ajout des numéros de colonne
        for (int j = 0; j < size_colGrid; j++) {
            Label label = new Label(String.valueOf(j));
            label.setStyle("-fx-font-size: 14; -fx-font-weight: bold;  -fx-text-fill: white;");
            areaProduct.add(label, j+1, 0);
        }

// Ajout des numéros de ligne
        for (int i = 0; i < size_rowGrid; i++) {
            Label label = new Label(String.valueOf(i));
            label.setStyle("-fx-font-size: 14; -fx-font-weight: bold; -fx-text-fill: white;");
            areaProduct.add(label, 0, i+1);
        }

        for (int i = 0; i < size_rowGrid; i++) {
            for (int j = 0; j < size_colGrid; j++) {
                Button button = new Button();
                int bt_product_with = 138;
                int bt_product_height = 73;
                button.setPrefSize(bt_product_with, bt_product_height);
                button.setStyle("-fx-background-color: white;");
                button.setOnAction(this::onComponentClicked);
                if (i == size_rowGrid -1 && j == size_colGrid -1) {
                    // derniere case de la grid pas de bouton
                    // comme dans l'interface du prof
                    continue;
                }
                areaProduct.add(button, j+1, i+1);
            }
        }
    }